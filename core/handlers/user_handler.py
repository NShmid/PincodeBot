from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from core.keyboards.reply_keyboards import user_main_menu, seller_main_menu, orders_menu
from core.keyboards.inline_keyboards import get_user_order_keyboard
from core.database import db
from core.utils.main_state import MainState
from core.filters.emoji_filter import TextNormalizer

from datetime import datetime


user_router = Router()


@user_router.message(Command("start"))
async def user_start(message: types.Message, state: FSMContext):
    args = message.text.split(" ", 1)
    
    if len(args) > 1:
        if not db.is_new_seller(message.from_user.id):
            await message.answer(
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É",
                reply_markup=user_main_menu
            )
            return
            
        token = args[1]
        if not db.is_token_used(token):
            db.activate_token(message.from_user.id, token)
            db.sellers = db.get_sellers()
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ–¥–∞–≤–µ—Ü! –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                reply_markup=seller_main_menu
            )
        else:
            await message.answer("–≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞", reply_markup=user_main_menu)
    else:
        if message.from_user.id in db.sellers:
            await message.answer("–ü—Ä–∏–≤–µ—Ç, –ø—Ä–æ–¥–∞–≤–µ—Ü!", reply_markup=seller_main_menu)
        else:
            await message.answer("–ü—Ä–∏–≤–µ—Ç, –ø–æ–∫—É–ø–∞—Ç–µ–ª—å!", reply_markup=user_main_menu)
    
    await state.set_state(MainState.view_main)
     

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@user_router.message(StateFilter("*"), F.text.func(TextNormalizer("–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")))
async def back_to_main_menu(message: types.Message, state: FSMContext):
    keyboard = seller_main_menu if message.from_user.id in db.sellers else user_main_menu
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=keyboard)
    await state.set_state(MainState.view_main)


@user_router.message(F.text.func(TextNormalizer("–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")))
async def user_instruction(message: types.Message):
    await message.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
async def show_order_item(message: types.Message, bot: Bot, current_index: int, state: FSMContext, 
                           mode="create"):
    data = await state.get_data()
    orders = data.get("orders")
    if not orders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    order = orders[current_index]
    order_id = order[0]
    order_descr = order[1]
    delivery_date = datetime.strptime(order[4], "%Y-%m-%d %H:%M:%S")
    delivery_time = order[5]
    order_status = order[6]
    
    text = (f"–ó–∞–∫–∞–∑ ‚Ññ<b>{order_id}</b>\n\n"
            f"üõí <b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b>\n"
            f"{order_descr}\n\n"
            f"üïí <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_date.strftime('%d.%m.%Y')} {delivery_time}\n\n"
            f"<b>üî∏ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order_status}</b>\n\n"
            f"–ó–∞–∫–∞–∑ {current_index + 1} –∏–∑ {len(orders)}"
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_index=current_index)
    
    if mode == "create":
        msg = await message.answer(
            text=text, 
            parse_mode="HTML",
            reply_markup=get_user_order_keyboard(current_index, len(orders))
        )
        await state.update_data(last_order_msg_id=msg.message_id)
    elif mode == "move":
        await bot.edit_message_text(
            text=text,
            chat_id=message.chat.id,
            message_id=message.message_id,
            reply_markup=get_user_order_keyboard(current_index, len(orders)),
            parse_mode="HTML"
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_router.message(MainState.view_main, F.text.func(TextNormalizer("–º–æ–∏ –∑–∞–∫–∞–∑—ã")))
async def get_user_orders(message: types.Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    orders = db.get_orders(user_id)
    
    await state.set_state(MainState.view_orders)
    
    data = await state.get_data()
    last_order_msg_id = data.get("last_order_msg_id")
    if last_order_msg_id:
        await bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=last_order_msg_id,
            reply_markup=None
        )
        await state.update_data(last_basket_msg_id=None)
    
    await state.update_data(orders=orders)
    await state.update_data(current_index=0)
    await message.answer("–ó–∞–≥—Ä—É–∂–∞—é –∑–∞–∫–∞–∑—ã...", reply_markup=orders_menu)
    await show_order_item(message, bot, 0, state, mode="create")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@user_router.callback_query(MainState.view_orders)
async def redo_undo_orders(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    current_index = data.get("current_index")
    orders = data.get("orders")
    
    choice = callback.data
    if "–î–∞–ª–µ–µ" in choice:
        if current_index < len(orders) - 1:
            current_index += 1
            await show_order_item(callback.message, bot, current_index, state, mode="move")
            
    elif "–ù–∞–∑–∞–¥" in choice:
        if current_index > 0:
            current_index -= 1
            await show_order_item(callback.message, bot, current_index, state, mode="move")
    
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback
    

@user_router.message()
async def user_start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –º–µ–Ω—é")